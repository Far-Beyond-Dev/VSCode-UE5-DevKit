// src/generators/CppPropertiesGenerator.ts
import * as fs from 'fs';
import * as path from 'path';
import { UE5Project } from '../types';
import { PathUtils } from '../utils/PathUtils';

export class CppPropertiesGenerator {
    constructor(private project: UE5Project) {}

    generate() {
        const enginePath = PathUtils.getEnginePath();
        const windowsSdkVersion = this.getWindowsSdkVersion();
        const compilerPath = this.getCompilerPath();

        // The PROPER way: Use UE5's compile commands database + minimal manual config
        return {
            configurations: [
                {
                    name: `${this.project.name} Editor Win64 Development`,
                    intelliSenseMode: "windows-msvc-x64",
                    
                    // CRITICAL: Use UE5's generated compile commands database
                    // This contains ALL the proper includes, defines, and compiler flags
                    compileCommands: "${workspaceFolder}/.vscode/compileCommands_Default.json",
                    configurationProvider: "ms-vscode.cpptools",
                    
                    // Compiler settings
                    compilerPath: compilerPath,
                    cStandard: "c17",
                    cppStandard: "c++20",
                    windowsSdkVersion: windowsSdkVersion,
                    
                    // Minimal fallback paths (only used if compile commands fail)
                    includePath: [
                        "${workspaceFolder}/Intermediate/**",
                        "${workspaceFolder}/Plugins/**", 
                        "${workspaceFolder}/Source/**"
                    ],
                    
                    // Minimal fallback defines (only used if compile commands fail)
                    defines: [
                        "UNICODE",
                        "_UNICODE", 
                        "__UNREAL__",
                        "UBT_COMPILED_PLATFORM=Windows",
                        "WITH_ENGINE=1",
                        "WITH_UNREAL_DEVELOPER_TOOLS=1",
                        "WITH_APPLICATION_CORE=1",
                        "WITH_COREUOBJECT=1"
                    ],
                    
                    // Browse database settings
                    browse: {
                        path: [
                            "${workspaceFolder}",
                            `${enginePath}/Engine/Source`,
                            `${enginePath}/Engine/Plugins`
                        ],
                        limitSymbolsToIncludedHeaders: false,
                        databaseFilename: "${workspaceFolder}/.vscode/browse.vc.db"
                    }
                }
            ],
            version: 4
        };
    }

    private getWindowsSdkVersion(): string {
        const sdkPaths = [
            'C:/Program Files (x86)/Windows Kits/10/Include',
            'C:/Program Files/Windows Kits/10/Include'
        ];

        for (const sdkPath of sdkPaths) {
            if (fs.existsSync(sdkPath)) {
                try {
                    const versions = fs.readdirSync(sdkPath)
                        .filter(v => v.match(/^10\.\d+\.\d+\.\d+$/))
                        .sort()
                        .reverse();
                    if (versions.length > 0) {
                        return versions[0];
                    }
                } catch (error) {
                    continue;
                }
            }
        }

        return "10.0.22621.0"; // Fallback to Windows 11 SDK version
    }

    private getCompilerPath(): string {
        return PathUtils.getVisualStudioCompilerPath();
    }
}

// Enhanced Configuration Manager that properly sets up VS Code for UE5
export class UE5VSCodeSetup {
    constructor(private project: UE5Project) {}

    async setupProperVSCodeEnvironment() {
        const vscodeDir = path.join(this.project.path, '.vscode');
        if (!fs.existsSync(vscodeDir)) {
            fs.mkdirSync(vscodeDir, { recursive: true });
        }

        // 1. Generate the PROPER c_cpp_properties.json
        await this.generateCppProperties(vscodeDir);
        
        // 2. Ensure compile commands are generated by UE5
        await this.ensureCompileCommands();
        
        // 3. Generate optimized settings for UE5
        await this.generateOptimizedSettings(vscodeDir);
        
        // 4. Generate launch configurations for debugging
        await this.generateLaunchConfig(vscodeDir);
    }

    private async generateCppProperties(vscodeDir: string) {
        const generator = new CppPropertiesGenerator(this.project);
        const config = generator.generate();
        const configPath = path.join(vscodeDir, 'c_cpp_properties.json');
        
        fs.writeFileSync(configPath, JSON.stringify(config, null, 4));
        console.log('Generated PROPER c_cpp_properties.json using compile commands database');
    }

    private async ensureCompileCommands() {
        const compileCommandsPath = path.join(this.project.path, '.vscode', 'compileCommands_Default.json');
        
        if (!fs.existsSync(compileCommandsPath)) {
            console.log('⚠️  Compile commands not found. Run "Tools > Refresh Visual Studio Code Project" in UE5 Editor');
            console.log('   This generates the compile_commands.json that contains ALL proper IntelliSense settings');
        } else {
            console.log('✅ Found UE5-generated compile commands database');
        }
    }

    private async generateOptimizedSettings(vscodeDir: string) {
        const settingsPath = path.join(vscodeDir, 'settings.json');
        
        const optimizedSettings = {
            // File associations for UE5
            "files.associations": {
                "*.uproject": "json",
                "*.uplugin": "json", 
                "*.h": "cpp",
                "*.hpp": "cpp",
                "*.inl": "cpp",
                "*.inc": "cpp",
                "*.usf": "hlsl",
                "*.ush": "hlsl"
            },

            // Exclude UE5 build artifacts for performance
            "files.exclude": {
                "**/Binaries": true,
                "**/Intermediate": true,
                "**/Saved": true,
                "**/.vs": true,
                "**/DerivedDataCache": true,
                "**/.vscode/browse.vc.db*": true
            },

            "search.exclude": {
                "**/Binaries": true,
                "**/Intermediate": true, 
                "**/Saved": true,
                "**/.vs": true,
                "**/DerivedDataCache": true,
                "**/Content/**/*.uasset": true,
                "**/Content/**/*.umap": true
            },

            "files.watcherExclude": {
                "**/Binaries/**": true,
                "**/Intermediate/**": true,
                "**/Saved/**": true,
                "**/.vs/**": true,
                "**/DerivedDataCache/**": true
            },

            // CRITICAL C++ IntelliSense settings for UE5
            "C_Cpp.intelliSenseEngine": "default",
            "C_Cpp.errorSquiggles": "enabled",
            "C_Cpp.autoAddFileAssociations": false,
            "C_Cpp.default.intelliSenseMode": "windows-msvc-x64", 
            "C_Cpp.default.cppStandard": "c++20",
            "C_Cpp.default.cStandard": "c17",
            
            // IMPORTANT: Enable IntelliSense fallback for UE5 projects
            "C_Cpp.intelliSenseEngineFallback": "enabled",
            
            // Performance settings for large UE5 projects
            "C_Cpp.intelliSenseUpdateDelay": 500,
            "C_Cpp.workspaceParsingPriority": "highest",
            "C_Cpp.enhancedColorization": "enabled",
            "C_Cpp.inactiveRegionOpacity": 0.5,
            "C_Cpp.dimInactiveRegions": true,
            "C_Cpp.autocomplete": "default",
            "C_Cpp.loggingLevel": "Warning",

            // UE5 coding style settings
            "editor.tabSize": 4,
            "editor.insertSpaces": false,
            "editor.detectIndentation": false,
            "editor.rulers": [120],
            "editor.wordWrap": "off",
            "editor.trimAutoWhitespace": true,

            // Language-specific overrides
            "[cpp]": {
                "editor.wordBasedSuggestions": false,
                "editor.suggest.insertMode": "replace",
                "editor.semanticHighlighting.enabled": true,
                "editor.defaultFormatter": "ms-vscode.cpptools"
            },

            "[c]": {
                "editor.wordBasedSuggestions": false,
                "editor.suggest.insertMode": "replace", 
                "editor.semanticHighlighting.enabled": true,
                "editor.defaultFormatter": "ms-vscode.cpptools"
            }
        };

        // Merge with existing settings if they exist
        if (fs.existsSync(settingsPath)) {
            try {
                const existingSettings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
                Object.assign(existingSettings, optimizedSettings);
                fs.writeFileSync(settingsPath, JSON.stringify(existingSettings, null, 4));
            } catch (error) {
                fs.writeFileSync(settingsPath, JSON.stringify(optimizedSettings, null, 4));
            }
        } else {
            fs.writeFileSync(settingsPath, JSON.stringify(optimizedSettings, null, 4));
        }

        console.log('Generated optimized VS Code settings for UE5');
    }

    private async generateLaunchConfig(vscodeDir: string) {
        const enginePath = PathUtils.getEnginePath();
        const launchPath = path.join(vscodeDir, 'launch.json');
        
        const launchConfig = {
            version: "0.2.0",
            configurations: [
                {
                    name: "Launch UE5 Editor",
                    type: "cppvsdbg",
                    request: "launch",
                    program: path.join(enginePath, "Engine/Binaries/Win64/UnrealEditor.exe"),
                    args: [`"${this.project.uprojectPath}"`],
                    stopAtEntry: false,
                    cwd: "${workspaceFolder}",
                    environment: [],
                    console: "externalTerminal",
                    symbolSearchPath: `${enginePath}/Engine/Binaries/Win64;${this.project.path}/Binaries/Win64`,
                    sourceFileMap: {
                        "/Engine/Source/": `${enginePath}/Engine/Source/`
                    },
                    visualizerFile: `${enginePath}/Engine/Extras/VisualStudioDebugging/Unreal.natvis`
                },
                {
                    name: "Launch UE5 Editor (DebugGame)",
                    type: "cppvsdbg", 
                    request: "launch",
                    program: path.join(enginePath, "Engine/Binaries/Win64/UnrealEditor-Win64-DebugGame.exe"),
                    args: [`"${this.project.uprojectPath}"`],
                    stopAtEntry: false,
                    cwd: "${workspaceFolder}",
                    environment: [],
                    console: "externalTerminal",
                    symbolSearchPath: `${enginePath}/Engine/Binaries/Win64;${this.project.path}/Binaries/Win64`,
                    sourceFileMap: {
                        "/Engine/Source/": `${enginePath}/Engine/Source/`
                    },
                    visualizerFile: `${enginePath}/Engine/Extras/VisualStudioDebugging/Unreal.natvis`
                },
                {
                    name: "Attach to UE5 Editor",
                    type: "cppvsdbg",
                    request: "attach", 
                    processId: "${command:pickProcess}",
                    symbolSearchPath: `${enginePath}/Engine/Binaries/Win64;${this.project.path}/Binaries/Win64`,
                    sourceFileMap: {
                        "/Engine/Source/": `${enginePath}/Engine/Source/`
                    },
                    visualizerFile: `${enginePath}/Engine/Extras/VisualStudioDebugging/Unreal.natvis`
                }
            ]
        };

        fs.writeFileSync(launchPath, JSON.stringify(launchConfig, null, 4));
        console.log('Generated launch configurations for debugging');
    }
}